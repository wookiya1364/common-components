"use client";

import React, {
  ReactNode,
  createContext,
  useCallback,
  useContext,
  useState,
} from "react";

type TChaserInspectReturn = {
  target: string;
  byte: number;
};

type TOrientation = "lt" | "rt" | "lb" | "rb";

// Chaser 컨텍스트를 생성합니다.
const ChaserContext = createContext<{ register: (obj: object) => void } | null>(
  null
);

const useChaser = () => {
  const context = useContext(ChaserContext);
  if (!context) {
    throw new Error("useChaser must be used within a ChaserProvider");
  }
  console.log(context);
  return context;
};

const KEY_START_INDEX: number = 0;
const KEY_END_INDEX: number = 10;

const getByteLength = (object: any): number => {
  let length: number = 0;
  let charCode: number;
  for (let i: number = 0; (charCode = String(object).charCodeAt(i++)); ) {
    length += charCode >> 11 ? 3 : charCode >> 7 ? 2 : 1;
  }
  return length;
};

const keybyObject = (object: any, byte = 0): TChaserInspectReturn => ({
  target: object,
  byte,
});

const inspectObjectType = (value: any): string => {
  // 원시 타입 처리
  if (
    value === null ||
    (typeof value !== "object" && typeof value !== "function")
  ) {
    return value;
  }

  // 함수 처리
  if (typeof value === "function") {
    return `Function: ${value.name || "anonymous"}`;
  }

  // 배열 처리
  if (Array.isArray(value)) {
    const elements = value
      .slice(KEY_START_INDEX, KEY_END_INDEX)
      .map(inspectObjectType); // 성능을 위해 처음 10개 요소만 처리
    return JSON.stringify(elements);
  }

  // 객체 처리
  const entries = Object.entries(value).slice(KEY_START_INDEX, KEY_END_INDEX); // 성능을 위해 처음 10개 키-값 쌍만 처리
  const props = entries.map(
    ([target, val]) => `${target}: ${inspectObjectType(val)}`
  );
  return `{${props.join(", ")}}`;
};

const GarbageMonitor = ({
  orientation,
  garbage,
}: {
  orientation: TOrientation;
  garbage: TChaserInspectReturn[];
}) => {
  const orientationStyle = {
    lb: "fixed bottom-0 left-0",
    rb: "fixed bottom-0 right-0",
    lt: "fixed top-0 left-0",
    rt: "fixed top-0 right-0",
  }[orientation];
  console.log(garbage);

  return (
    <div className={orientationStyle}>
      <p>.....</p>
      <p>.....</p>
    </div>
  );
};

const ChaserInspect = ({
  children,
  orientation = "rb",
}: {
  children: ReactNode;
  orientation?: TOrientation;
}) => {
  const [garbageRegister, setGarbageRegister] = useState<
    TChaserInspectReturn[]
  >([]);

  // 객체 추적기를 생성하는 함수
  const register = useCallback((object: any) => {
    const finalReg = new FinalizationRegistry(
      (object: TChaserInspectReturn) => {
        const garbage = JSON.stringify(object.target).replaceAll("\\", "");
        const garbageSize = object.byte;
        const message = `${garbage} has been collected by the G.C`;
        console.info(message, `${garbageSize} bytes`);
        return message;
      }
    );

    const identifier = inspectObjectType(object);
    const byte = getByteLength(object);

    // finalReg에 객체를 등록. 여기서 객체가 수집될 때 콜백으로 전달할 이름을 지정합니다.
    finalReg.register(
      keybyObject(identifier, byte),
      keybyObject(identifier, byte)
    );
  }, []);

  return (
    <ChaserContext.Provider value={{ register }}>
      {children}
      <GarbageMonitor orientation={orientation} garbage={garbageRegister} />
    </ChaserContext.Provider>
  );
};

export default ChaserInspect;
export { useChaser };
